plugins {
	id 'com.bmuschko.docker-remote-api' version '4.6.2'
  id 'org.springframework.boot' version '2.1.4.RELEASE'
  id 'java'
  id 'groovy'
  id 'eclipse'
  id 'idea'
  id 'jacoco'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

group = 'com.circulosiete.workshop.devops'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

bootJar {
  archiveName = 'service.jar'
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation "org.codehaus.groovy:groovy-all:2.5.6"
  testImplementation "org.spockframework:spock-core:1.2-groovy-2.4"
  testImplementation "org.hamcrest:hamcrest-core:1.3"
  // allows mocking of classes (in addition to interfaces)
  testRuntime "net.bytebuddy:byte-buddy:1.8.21"
  // allows mocking of classes without default constructor (together with CGLIB)
  testRuntime "org.objenesis:objenesis:2.6"
}
task createDockerfile(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
  destFile = project.file('build/libs/Dockerfile')
  from 'openjdk:8u181-jre-slim-stretch'
  copyFile 'service.jar', '/opt/service.jar'
  exposePort 8080
  entryPoint 'java', "-Djava.awt.headless=true", "-Xms128m", "-Xmx128m", '-jar', '/opt/service.jar'
}
task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
  dependsOn createDockerfile
  inputDir = createDockerfile.destFile.get().asFile.parentFile
  tags.add('quay.io/godo_godines/team1-service:' + project.version.toLowerCase())
}
task pushImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
  dependsOn buildImage
  imageName = buildImage.tags.get().first()
}

docker {
  registryCredentials {
    url = (System.getenv('CONTAINER_REGISTRY_URL') ?: project.properties.getOrDefault('containerRegistryUrl', 'https://registry.hub.docker.io'))
    username = (System.getenv('CONTAINER_REGISTRY_USERNAME') ?: (project.hasProperty('containerRegistryUsername') ? containerRegistryUsername : '')) ?: ''
    password = (System.getenv('CONTAINER_REGISTRY_PASSWORD') ?: (project.hasProperty('containerRegistryPassword') ? containerRegistryPassword : '')) ?: ''
  }
}
createDockerfile.dependsOn bootJar